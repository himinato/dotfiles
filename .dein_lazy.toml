[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_path = '.*'
on_i = 1
hook_add = '''
let g:neoyank#limit = 1000
nmap <silent> <C-u><C-y> :<C-u>:Unite history/yank<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite']
hook_add = '''
nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
'''
hook_post_source = '''
call denite#custom#var('file_rec', 'command',
\ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
call denite#custom#var('grep', 'command',
\ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
call denite#custom#var('grep', 'default_opts', [])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#source('file_rec', 'matcher',
\ ['matcher_cpsm', 'matcher_fuzzy'])
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
let g:unite_enable_start_insert = 1
let g:unite_enable_ignore_case  = 1
let g:unite_enable_smart_case   = 1

nmap <silent> <C-u><C-f> :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nmap <silent> <C-u><C-r> :<C-u>Unite -buffer-name=register register<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['eruby', 'html', 'gohtmltmpl']
hook_add = '''
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = { 'lang' : 'ja', 'html' : { 'indentation' : '  ' }}
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign']
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
" }}}
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
autocmd! BufWritePost * Neomake
'''
hook_source = '''
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_ruby_enabled_makers = ['rubocop']
let g:neomake_go_enabled_makers = ['golint']
let g:neomake_error_sign = { 'texthl': 'NeomakeErrorMsg' }
'''

