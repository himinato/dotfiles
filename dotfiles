#!/bin/bash
set -e
DOT_DIRECTORY="${HOME}/dotfiles"
DOT_TARBALL="https://github.com/himinato/dotfiles/tarball/master"
REMOTE_URL="git@github.com:himinato/dotfiles.git"

has() {
  type "$1" > /dev/null 2>&1
}

usage() {
  name=`basename $0`
  cat <<EOF
Usage:
  $name [arguments] [command]

Commands:
  deploy
  initialize

Arguments:
  -f $(tput setaf 1)** warning **$(tput sgr0) Overwrite dotfiles.
  -h Print help (this message)
EOF
  exit 1
}

while getopts :f:h opt; do
  case ${opt} in
    f)
      OVERWRITE=true
      ;;
    h)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

# Working only OS X.
case ${OSTYPE} in
  darwin*)
    ;;
  *)
    echo $(tput setaf 1)Working only OS X!!$(tput sgr0)
    exit 1
    ;;
esac

# If missing, download and extract the dotfiles repository
if [ -n "${OVERWRITE}" -o ! -d ${DOT_DIRECTORY} ]; then
  echo "Downloading dotfiles..."
  rm -rf ${DOT_DIRECTORY}
  mkdir ${DOT_DIRECTORY}

  if has "git"; then
    git clone --recursive "${REMOTE_URL}" "${DOT_DIRECTORY}"
  else
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOT_TARBALL}
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOT_DIRECTORY}
    rm -f ${HOME}/dotfiles.tar.gz
  fi

  echo $(tput setaf 2)Download dotfiles complete!. ✔︎$(tput sgr0)
fi

cd ${DOT_DIRECTORY}
source ./lib/brew

link_files() {
  # Force remove the vim directory if it's already there
  [ -n "${OVERWRITE}" -a -d ${HOME}/.vim ] && rm -rf ${HOME}/.vim
  cd ${DOT_DIRECTORY}

  for f in .??*
  do
    # If you have ignore files, add file/directory name here
    [[ ${f} = ".git" ]] && continue
    [[ ${f} = ".gitignore" ]] && continue
    ln -snfv ${DOT_DIRECTORY}/${f} ${HOME}/${f}
  done
  echo $(tput setaf 2)Deploy dotfiles complete!. ✔︎$(tput sgr0)
}

initialize() {
  run_brew

  [ ! -d ${HOME}/.zplug ] && git clone https://github.com/b4b4r07/zplug ${HOME}/.zplug
  [ ! -d ${HOME}/.tmux/plugins/tpm ] && git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm

  if has "nodebrew"; then
    # Install latest node
    current=`nodebrew ls | tail -n 1 | cut -d' ' -f 2`
    if [ ${current} = "none"  ]; then
      curl -sL git.io/nodebrew | perl - setup
      nodebrew install-binary latest
      nodebrew use latest
    fi
  fi
  if has "rbenv"; then
    # Install latest ruby
    latest=`rbenv install --list | grep -v - | tail -n 1`
    current=`rbenv versions | tail -n 1 | cut -d' ' -f 2`
    if [ ${current} != ${latest} ]; then
      rbenv install ${latest}
      rbenv global ${latest}
    fi
  fi

  [ ${SHELL} != "/bin/zsh"  ] && chsh -s /bin/zsh
  echo "$(tput setaf 2)Initialize complete!. ✔︎$(tput sgr0)"
}

command=$1
[ $# -gt 0 ] && shift

case $command in
  deploy)
    link_files
    ;;
  init*)
    initialize
    ;;
  *)
    usage
    ;;
esac

exit 0
